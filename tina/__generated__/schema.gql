# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  service(relativePath: String): Service!
  serviceConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: ServiceFilter): ServiceConnection!
  case_study(relativePath: String): Case_study!
  case_studyConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: Case_studyFilter): Case_studyConnection!
}

input DocumentFilter {
  service: ServiceFilter
  case_study: Case_studyFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter): DocumentConnection!
}

union DocumentNode = Service | Case_study

type ServiceTags {
  name: String
}

type Service implements Node & Document {
  active: Boolean
  name: String
  permalink: String
  title: String!
  description: String
  frame_url: String
  services_tagline: String
  tags: [ServiceTags]
  order: Float
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input BooleanFilter {
  eq: Boolean
  exists: Boolean
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input ServiceTagsFilter {
  name: StringFilter
}

input NumberFilter {
  lt: Float
  lte: Float
  gte: Float
  gt: Float
  eq: Float
  exists: Boolean
  in: [Float]
}

input ServiceFilter {
  active: BooleanFilter
  name: StringFilter
  permalink: StringFilter
  title: StringFilter
  description: StringFilter
  frame_url: StringFilter
  services_tagline: StringFilter
  tags: ServiceTagsFilter
  order: NumberFilter
}

type ServiceConnectionEdges {
  cursor: String!
  node: Service
}

type ServiceConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [ServiceConnectionEdges]
}

type Case_studyServicesTags {
  name: String
}

type Case_studyServices {
  name: String
  tags: [Case_studyServicesTags]
}

type Case_studyTags {
  name: String
}

type Case_studySolutions {
  title: String
  description: String
  media: String
}

type Case_study implements Node & Document {
  title: String!
  description: String
  hero_image: String
  category: String
  services: [Case_studyServices]
  testimonial: String
  cite: String
  icon: String
  color: String
  tags: [Case_studyTags]
  size: String
  aspect: String
  visible: Boolean
  solutions: [Case_studySolutions]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input Case_studyServicesTagsFilter {
  name: StringFilter
}

input Case_studyServicesFilter {
  name: StringFilter
  tags: Case_studyServicesTagsFilter
}

input Case_studyTagsFilter {
  name: StringFilter
}

input Case_studySolutionsFilter {
  title: StringFilter
  description: StringFilter
  media: ImageFilter
}

input Case_studyFilter {
  title: StringFilter
  description: StringFilter
  hero_image: ImageFilter
  category: StringFilter
  services: Case_studyServicesFilter
  testimonial: StringFilter
  cite: StringFilter
  icon: StringFilter
  color: StringFilter
  tags: Case_studyTagsFilter
  size: StringFilter
  aspect: StringFilter
  visible: BooleanFilter
  solutions: Case_studySolutionsFilter
}

type Case_studyConnectionEdges {
  cursor: String!
  node: Case_study
}

type Case_studyConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [Case_studyConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updateService(relativePath: String!, params: ServiceMutation!): Service!
  createService(relativePath: String!, params: ServiceMutation!): Service!
  updateCase_study(relativePath: String!, params: Case_studyMutation!): Case_study!
  createCase_study(relativePath: String!, params: Case_studyMutation!): Case_study!
}

input DocumentUpdateMutation {
  service: ServiceMutation
  case_study: Case_studyMutation
  relativePath: String
}

input DocumentMutation {
  service: ServiceMutation
  case_study: Case_studyMutation
}

input ServiceTagsMutation {
  name: String
}

input ServiceMutation {
  active: Boolean
  name: String
  permalink: String
  title: String
  description: String
  frame_url: String
  services_tagline: String
  tags: [ServiceTagsMutation]
  order: Float
}

input Case_studyServicesTagsMutation {
  name: String
}

input Case_studyServicesMutation {
  name: String
  tags: [Case_studyServicesTagsMutation]
}

input Case_studyTagsMutation {
  name: String
}

input Case_studySolutionsMutation {
  title: String
  description: String
  media: String
}

input Case_studyMutation {
  title: String
  description: String
  hero_image: String
  category: String
  services: [Case_studyServicesMutation]
  testimonial: String
  cite: String
  icon: String
  color: String
  tags: [Case_studyTagsMutation]
  size: String
  aspect: String
  visible: Boolean
  solutions: [Case_studySolutionsMutation]
}

schema {
  query: Query
  mutation: Mutation
}
